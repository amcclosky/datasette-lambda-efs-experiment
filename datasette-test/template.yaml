AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  datasette-test

  Sample SAM Template for datasette-test

Parameters:
  StageName:
    Type: String
    Default: Prod

Resources:
  DatasetteVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
  DatasetteSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "datasette-lambda Security Group"
      VpcId: !Ref DatasetteVpc
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 0
          ToPort: 65535
          IpProtocol: tcp
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 0
          ToPort: 65535
          IpProtocol: tcp
  DatasetteSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DatasetteVpc
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      CidrBlock: "10.0.0.0/24"
  DatasetteSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DatasetteVpc
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      CidrBlock: "10.0.1.0/24"
  EfsFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
  MountTargetA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EfsFileSystem
      SubnetId: !Ref DatasetteSubnetA
      SecurityGroups:
        - !Ref DatasetteSecurityGroup
  MountTargetB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EfsFileSystem
      SubnetId: !Ref DatasetteSubnetB
      SecurityGroups:
        - !Ref DatasetteSecurityGroup
  AccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EfsFileSystem
      PosixUser:
        Gid: "1000"
        Uid: "1000"
      RootDirectory:
        Path: "/lambda"
        CreationInfo:
          OwnerGid: "1000"
          OwnerUid: "1000"
          Permissions: "755"
  DatasetteFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - MountTargetA
      - MountTargetB
    Properties:
      CodeUri: datasette_lambda/
      Handler: app.lambda_handler
      Runtime: python3.8
      Policies:
        - EFSWriteAccessPolicy:
            FileSystem: !Ref EfsFileSystem
            AccessPoint: !Ref AccessPoint
      VpcConfig:
        SecurityGroupIds:
          - !Ref DatasetteSecurityGroup
        SubnetIds:
          - !Ref DatasetteSubnetA
          - !Ref DatasetteSubnetB
      FileSystemConfigs:
        - Arn: !GetAtt AccessPoint.Arn
          LocalMountPath: /mnt/lambda
      Events:
        DatasetteGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref DatasetteHttpApi
            Path: /{proxy+}
            Method: get
        DatasettePost:
          Type: HttpApi
          Properties:
            ApiId: !Ref DatasetteHttpApi
            Path: /{proxy+}
            Method: post

  DatasetteHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref StageName
      StageVariables:
        StageVar: Value
      FailOnWarnings: True

Outputs:
  DatasetteHttpApiUrl:
    Description: URL of Datasette
    Value:
      Fn::Sub: 'https://${DatasetteHttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${StageName}/'
  HttpApiId:
    Description: Api id of HttpApi
    Value:
      Ref: DatasetteHttpApi
